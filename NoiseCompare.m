function [] = NoiseCompare(Scans, Phase)

UpperBound = 0;   %maximum allowed amplitude
LowerBound = 0;   %minimum allowed amplitude
load("Variables.mat")
%Variables.mat is generated by the function ScanCondenser

%noise spike detector

amp = zeros(Scans,1);
%Complete operation for quadrature signal
if Phase == "q" || Phase == "Q"
    %IndQ = load("Variables.mat","IndQ")
    for i = 1:Scans;
        amp = max(IndQ(:,i))- min(IndQ(:,i));
        plot(i,amp, 'o')
        hold on
    end
end
%Complete operation for in-phase signal
if Phase == "i" || Phase == "I"
    IndI = load("Variables.mat", "IndI");
    for i = 1:Scans;
        amp = max(IndI(:,i))- min(IndI(:,i));
        plot(i,amp, 'o')
        hold on
    end
end



UpperBound = input("What is the upper signal limit? ");
LowerBound = input("What is the lower signal limit? ");
hold off
fprintf("Weeding out noisy scans using limits %.2f and %.2f.\n",LowerBound, UpperBound)


%weed out noisy/dead scans
filt = zeros(4096,Scans);    %new IndX matrix 
if Phase == "q" || Phase == "Q"
    for i = 1:Scans    
        amp(i) = max(IndQ(:,i))- min(IndQ(:,i));
        if amp(i) < UpperBound & amp(i) > LowerBound;    
            filt(:,i) = IndQ(:,i);    %ignores everything above/below threshold in IndX matrix
        end
    end
end
if Phase == "i" || Phase == "I"
    for i = 1:Scans    
        amp(i) = max(IndQ(:,i))- min(IndQ(:,i));
        if amp(i) < UpperBound & amp(i) > LowerBound;    
            filt(:,i) = IndI(:,i);    %ignores everything above/below threshold in IndX matrix
        end
    end
end


%re-averaging scans
for i=1:4096
    avg(i) = sum(filt(i,:))./Scans;
end
a=avg'-linspace(avg(1),avg(4096),4096)';
plot(Field(:,100),avg)


B=avg.';
